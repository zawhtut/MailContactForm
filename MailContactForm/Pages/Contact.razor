@page "/contact"
@inject MailContactForm.Data.GraphHelper Services
@using MailContactForm.Data
@using Microsoft.AspNetCore.Components.Web
@using System.Threading.Tasks

<h1>Contact Us</h1>

<form>
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" @bind="Name">
    </div>
    <div class="form-group">
        <label for="email">Email address</label>
        <input type="email" class="form-control" id="email" @bind="Email">
    </div>
    <div class="form-group">
        <label for="name">Subject</label>
        <input type="text" class="form-control" id="subject" @bind="Subject">
    </div>
    <div class="form-group">
        <label for="message">Message</label>
        <textarea class="form-control" id="message" rows="5" @bind="Message"></textarea>
    </div>
    <button type="submit" class="btn btn-primary" @onclick="SendEmail">Submit</button>
</form>

<div class="alert alert-success" role="alert" style="@GetNotificationStyle()">
    Your message has been sent successfully!
</div>

@code {
    private string Name { get; set; }
    private string Email { get; set; }
    private string Subject { get; set; }
    private string Message { get; set; }
    private bool isNotificationVisible = false;

    private async Task SendEmail()
    {
        string message = $"{Name} has sent you a message. Here it is:\n Email:{Email}\n" + Message;

        await Services.SendMailAsync(Subject, message);
        // Do something after the email is sent, like showing a confirmation message

        isNotificationVisible = true;

        StateHasChanged();
        Task.Delay(3000).ContinueWith(t =>
        {
            isNotificationVisible = false;
            StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {
        var settings = Settings.LoadSettings();

        // Initialize Graph
        InitializeGraph(settings);

    }

    void InitializeGraph(Settings settings)
    {
        GraphHelper.InitializeGraphForAppOnlyAuth(settings);
    }
    private string GetNotificationStyle()
    {
        return isNotificationVisible ? "display:block;" : "display:none;";
    }
}
